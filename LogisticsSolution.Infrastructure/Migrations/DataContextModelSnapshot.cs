// <auto-generated />
using System;
using LogisticsSolution.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LogisticsSolution.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.AgentProvince", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("ZN_AgentsProvince", (string)null);
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.Mailing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("ZN_MailingList", (string)null);
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MoveHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MoveAgentId")
                        .HasColumnType("int");

                    b.Property<long>("MoveRequestId")
                        .HasColumnType("bigint");

                    b.Property<int>("MoveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MoveAgentId");

                    b.HasIndex("MoveRequestId");

                    b.ToTable("ZN_MoveHostories", (string)null);
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MoveItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemCount")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<long>("MoveRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("MoveRequestId");

                    b.ToTable("ZN_Move_Items", (string)null);
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MoveRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DropOffAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DropOffLatitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DropOffLongitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("HasBuildingInsurance")
                        .HasColumnType("bit");

                    b.Property<bool>("HasElevator")
                        .HasColumnType("bit");

                    b.Property<string>("LongCarry")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MoveCode")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)");

                    b.Property<int>("MoveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("MoveTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NeedHelpPacking")
                        .HasColumnType("bit");

                    b.Property<bool>("NeedShuttle")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfFloors")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PickUpAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PickUpLatitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PickUpLongitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PickUpTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MoveCode")
                        .IsUnique();

                    b.HasIndex("ProvinceId");

                    b.ToTable("ZN_Move_Requests", (string)null);
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MovingAgent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyOverView")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KvkNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("KvkNumber")
                        .IsUnique();

                    b.ToTable("ZN_Moving_Agents", (string)null);
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ZN_Province", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drenthe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Flevoland"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Friesland (Fryslân)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gelderland"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Groningen"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Limburg"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Noord-Brabant"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Noord-Holland"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Overijssel"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Utrecht"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Zeeland"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Zuid-Holland"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Assen"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Lelystad"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Arnhem"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Groningen"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Maastricht"
                        },
                        new
                        {
                            Id = 18,
                            Name = "'s-Hertogenbosch (Den Bosch)"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Haarlem"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Zwolle"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Middelburg"
                        },
                        new
                        {
                            Id = 22,
                            Name = "The Hague (Den Haag)"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Leeuwarden"
                        });
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.Quote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditonalInformation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("MoveRequestId")
                        .HasColumnType("bigint");

                    b.Property<int>("MovingAgentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProposedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MoveRequestId");

                    b.HasIndex("MovingAgentId");

                    b.ToTable("ZN_Quotes", (string)null);
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.AgentProvince", b =>
                {
                    b.HasOne("LogisticsSolution.Domain.Entities.MovingAgent", "Agent")
                        .WithMany("ProvincesCovered")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsSolution.Domain.Entities.Province", "Province")
                        .WithMany("MovingAgents")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Agent");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MoveHistory", b =>
                {
                    b.HasOne("LogisticsSolution.Domain.Entities.MovingAgent", "MovingAgent")
                        .WithMany("MoveHistories")
                        .HasForeignKey("MoveAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsSolution.Domain.Entities.MoveRequest", "MoveRequest")
                        .WithMany("MoveHistories")
                        .HasForeignKey("MoveRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MoveRequest");

                    b.Navigation("MovingAgent");
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MoveItem", b =>
                {
                    b.HasOne("LogisticsSolution.Domain.Entities.MoveRequest", "MoveRequest")
                        .WithMany("MoveItems")
                        .HasForeignKey("MoveRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MoveRequest");
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MoveRequest", b =>
                {
                    b.HasOne("LogisticsSolution.Domain.Entities.Province", "Province")
                        .WithMany("MoveRequests")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.Quote", b =>
                {
                    b.HasOne("LogisticsSolution.Domain.Entities.MoveRequest", "MoveRequest")
                        .WithMany("Quotes")
                        .HasForeignKey("MoveRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LogisticsSolution.Domain.Entities.MovingAgent", "MovingAgent")
                        .WithMany("Quotes")
                        .HasForeignKey("MovingAgentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MoveRequest");

                    b.Navigation("MovingAgent");
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MoveRequest", b =>
                {
                    b.Navigation("MoveHistories");

                    b.Navigation("MoveItems");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.MovingAgent", b =>
                {
                    b.Navigation("MoveHistories");

                    b.Navigation("ProvincesCovered");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("LogisticsSolution.Domain.Entities.Province", b =>
                {
                    b.Navigation("MoveRequests");

                    b.Navigation("MovingAgents");
                });
#pragma warning restore 612, 618
        }
    }
}
