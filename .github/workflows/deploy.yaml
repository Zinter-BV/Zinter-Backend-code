name: Deploy Backend to AKS

on:
  push:
    branches:
      - main

      
env:
  IMAGE_NAME: backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS contextname: Deploy Backend to AKS

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: backend
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set AKS context
      uses: azure/aks-set-context@v3
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

    - name: Install Cert Manager
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.4/cert-manager.yaml

    - name: Apply ClusterIssuer
      run: |
        kubectl apply -f k8s/cert-issuer.yaml

    - name: Create DB secret in cluster
      run: |
        kubectl create secret generic backend-secret \
          --from-literal=dbConnectionString="${{ secrets.AZURE_SQL_CONNECTION_STRING }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy backend to AKS
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml

    # Optional: Terraform step if backend provisioning is part of this repo
    - name: Terraform Init & Apply
      working-directory: ./infrastructure
      run: |
        terraform init
        terraform apply -auto-approve
      env:
        TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

      uses: azure/aks-set-context@v3
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}
        resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}

    - name: Install Cert Manager
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.12.4/cert-manager.yaml

    - name: Apply ClusterIssuer
      run: |
        kubectl apply -f k8s/cert-issuer.yaml

    - name: Create DB secret in cluster
      run: |
        kubectl create secret generic backend-secret \
          --from-literal=dbConnectionString="${{ secrets.AZURE_SQL_CONNECTION_STRING }}" \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy backend
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
